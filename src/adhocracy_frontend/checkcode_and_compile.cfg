[buildout]
parts +=
    nodejs
    npm_config
    npms
    npm_bins
    merge_static_directories
    do_merge_static_directories
    frontend.current.link
    bower
    AdhocracySpec.ts
    meta_api
    resources
    javascript
    gruntfile
    grunt
    rubygems
    stylesheets
    hologram
    styleguide

[tslint_json]
recipe = collective.recipe.template
inline =
    {
      "ban": [],
      "rules": {
        "class-name": true,
        "comment-format": [true,
            "check-space"
        ],
        "curly": true,
        "eofline": true,
        "forin": true,
        "indent": false,
        "interface-name": false,
        "jsdoc-format": true,
        "label-position": true,
        "label-undefined": true,
        "max-line-length": [true, 140],
        "no-any": false,
        "no-arg": true,
        "no-bitwise": true,
        "no-console": [true,
            "debug",
            "info",
            "time",
            "timeEnd",
            "trace"
        ],
        "no-consecutive-blank-lines": false,
        "no-construct": true,
        "no-debugger": true,
        "no-duplicate-key": true,
        "no-duplicate-variable": true,
        "no-empty": true,
        "no-eval": true,
        "no-string-literal": false,
        "trailing-comma": {
            "multiline": "never",
            "singleline": "never"
        },
        "no-trailing-whitespace": true,
        "no-unused-expression": true,
        "no-unused-variable": true,
        "no-unreachable": true,
        "no-use-before-declare": true,
        "no-var-requires": true,
        "one-line": [true,
            "check-catch",
            "check-else",
            "check-open-brace",
            "check-whitespace"
        ],
        "quotemark": [true, "double"],
        "radix": true,
        "semicolon": true,
        "triple-equals": [true, "allow-null-check"],
        "typedef": false,
        "typedef-whitespace": [true,
            ["callSignature", "noSpace"],
            ["catchClause", "noSpace"],
            ["indexSignature", "space"]
        ],
        "use-strict": [true,
            "check-module",
            "check-function"
        ],
        "variable-name": [true, "allow-leading-underscore"],
        "whitespace": [true,
            "check-branch",
            "check-decl",
            "check-operator",
            "check-separator",
            "check-type"
        ]
      }
    }
output = ${buildout:directory}/etc/tslint.json
mode = 644

[check_code]
# Extends adhocracy_core/checkcode.cfg['check_code']
css_check =
    if [ x$1 == x"-a" ]; then
        CHANGED_SCSS=`git ls-files | grep '\.scss$' | grep -v 'third_party'`
    else
        CHANGED_SCSS=`git diff --staged --name-only --diff-filter=ACMR | grep '\.scss$' | grep -v 'third_party'`
    fi
    if [ -n "$CHANGED_SCSS" ] ; then
        . source_env
        ${buildout:bin-directory}/grunt sasslint
        ret_code=$(($ret_code + $?))
    fi
js_check =
    if [ x$1 == x"-a" ]; then
        CHANGED_TS=`git ls-files | grep '\.ts$' | grep -v '\.d\.ts'`
    else
        CHANGED_TS=`git diff --staged --name-only --diff-filter=ACMR | grep '\.ts$' | grep -v '\.d\.ts'`
    fi
    if [ -n "$CHANGED_TS" ] ; then
        ${buildout:bin-directory}/tslint -c ${tslint_json:output} $CHANGED_TS
        ret_code=$(($ret_code + $?))
    fi
html_check =
    if [ x$1 == x"-a" ]; then
        CHANGED_HTML=`git ls-files | grep '\.html$'`
    else
        CHANGED_HTML=`git diff --staged --name-only --diff-filter=ACMR | grep '\.html$'`
    fi
    if [ -n "$CHANGED_HTML" ] ; then
        . source_env
        bin/grunt htmlhint
        ret_code=$(($ret_code + $?))
    fi

[nodejs]
recipe = gp.recipe.node
version = 4.4.5
scripts = node npm

[npm_config]
recipe = collective.recipe.template
inline =
    {
        "name": "adhocracy-frontend",
        "version": "0.0.1",
        "devDependencies": {
            "typescript": "1.8.10",
            "tslint": "3.15.1",
            "bower": "1.7.9",
            "jasmine": "2.4.1",
            "protractor": "3.3.0",
            "sync-exec": "0.6.2",
            "q": "1.4.1",
            "lodash": "4.15.0",
            "node-fs": "0.1.7",
            "grunt": "1.0.1",
            "grunt-cli": "1.2.0",
            "grunt-angular-templates": "1.1.0",
            "requirejs": "2.2.0",
            "grunt-contrib-requirejs": "1.0.0",
            "htmlhint": "0.9.13",
            "grunt-htmlhint": "0.9.13",
            "mailparser": "0.6.1",
            "ini": "1.3.4",
            "node-sass": "3.8.0",
            "grunt-sass": "1.2.1",
            "grunt-sass-lint": "0.2.0"
        }
    }
output = ${buildout:directory}/package.json
mode = 700

[npms]
recipe = plone.recipe.command
command = ${buildout:bin-directory}/npm install
update-command = ${:command}
stop-on-error = yes

[npm_bins]
# npm doesn't seem to allow to specify the bin directory, so we link stuff manually.
recipe = plone.recipe.command
command =
    cd ${buildout:bin-directory}
    ln -sf ${buildout:directory}/node_modules/.bin/* .
update-command = ${:command}
stop-on-error = yes

[bower]
recipe = bowerrecipe
packages =
    jquery#2.2.4
    angular#1.5.8
    angular-animate#1.5.8
    angular-aria#1.5.8
    angular-messages#1.5.8
    angular-cache#4.3.2
    angular-elastic#2.5.1
    angular-scroll#1.0.0
    angular-translate#2.11.1
    angular-translate-loader-static-files#2.11.1
    markdown-it#5.1.0
    leaflet#0.7.7
    leaflet.markercluster#v0.5.0
    lodash#4.15.0
    requirejs#2.2.0
    requirejs-text#2.0.15
    jasmine#2.4.1
    blanket#1.1.7
    q#1.4.1
    moment#2.11.1
    relatively-sticky#2.0.0
    ng-flow#2.7.4
    nidico/socialshareprivacy#392c61fef7b99b75dec90d16213c8c7a702d1809
    webshim#1.15.10
    lato#0.3.0
    webfont-opensans#0.0.2
    merriweather-fontface#f5fee770c034a92a3a551d52fcd34f210acf23d2
    xi/sass-planifolia#0.3.1

executable = ${buildout:bin-directory}/node ${buildout:directory}/node_modules/.bin/bower --config.interactive=false
base-directory = ${adhocracy:frontend.static_dir}/lib
downloads = .

[AdhocracySpec.ts]
recipe = plone.recipe.command
command = cd ${adhocracy:frontend.static_dir}/js/ && ./AdhocracySpec.sh > AdhocracySpec.ts
update-command = ${:command}
stop-on-error = yes

[merge_static_directories]
recipe = collective.recipe.template
# Static directories to be merged. If a file exists in multiple directories
# the first one wins. Customizations should therefore be mentioned on top of
# core packages.
static_directories =
    ${adhocracy:frontend.core.static_dir}
inline =
    #!/usr/bin/env python
    """ Merge static directories of multiple packages.

        Assumes that this script is in full control of all symlinks under
        target_dir. If symlinks are manually set or created by other
        scripts, they will be deleted.
    """
    import os
    import os.path

    target_dir = "${adhocracy:frontend.static_dir}"
    source_dirs = "${:static_directories}".split()

    # remove old links from target dir
    for target_root, dirnames, filenames in os.walk(target_dir):
        for filename in filenames:
            link_name = os.path.join(target_root, filename)
            if os.path.islink(link_name):
                os.unlink(link_name)

    # set new symlinks
    for source_dir in source_dirs:
        for source_root, dirnames, filenames in os.walk(source_dir):
            target_root = os.path.join(target_dir, os.path.relpath(source_root, source_dir))
            if not os.path.exists(target_root):
                os.makedirs(target_root)
            elif not os.path.isdir(target_root):
                raise Exception("unexpcted file {}".format(target_root))

            for filename in filenames:
                link_name = os.path.join(target_root, filename)
                if os.path.exists(link_name):
                    continue
                link_source = os.path.realpath(os.path.join(source_root, filename))
                os.symlink(link_source, link_name)
output = ${buildout:bin-directory}/ad_merge_static_directories
mode = 700

[do_merge_static_directories]
recipe = plone.recipe.command
command =
    ${merge_static_directories:output}
update-command = ${do_merge_static_directories:command}
stop-on-error = yes

[meta_api]
# We save meta_api as a static file in order to use it in the resources part
# and deliver and cache it together with the static frontend resources.
recipe = plone.recipe.command
command =
    ${buildout:bin-directory}/prequest ${noserver.ini:output} /meta_api > ${:output}
update-command = ${:command}
output = ${adhocracy:frontend.static_dir}/meta_api.json
stop-on-error = yes

[resources]
recipe = plone.recipe.command
stop-on-error = True
command =
    . ${source_env:output}
    git ls-files --other ${:jsdir}/Resources_ | xargs rm -f
    ${buildout:bin-directory}/tsc --module commonjs --pretty ${:jsdir}/mkResources.ts
    ${buildout:bin-directory}/node ${:jsdir}/mkResources.js ${meta_api:output} ${:jsdir}
update-command = ${:command}
jsdir = ${adhocracy:frontend.static_dir}/js
stop-on-error = yes

[javascript]
recipe = plone.recipe.command
stop-on-error = True
command =
    ${buildout:bin-directory}/node ${buildout:bin-directory}/tsc -m umd --sourcemap --pretty ${adhocracy:frontend.static_dir}/js/Adhocracy*.ts
update-command = ${javascript:command}

[gruntfile]
recipe = collective.recipe.template
inline =
    var sass = require("node-sass");

    module.exports = function(grunt) {
        grunt.initConfig({
            ngtemplates: {
                app: {
                    cwd: '${adhocracy:frontend.static_dir}',
                    src: 'js/**/**.html',
                    dest: '${adhocracy:frontend.static_dir}/js/templates.js',
                    options:      {
                        prefix: '/static/',
                        bootstrap:  function(module, script) {
                             return '\
                                 define(["angular"], function (angular) {\
                                     "use strict";\
                                 var templates = angular.module("templates", []);\
                                 templates.run(["$templateCache", function($templateCache) {\
                                     ' + script + '\
                                 }]);\
                                 return templates;\
                                 });';
                        }
                    }
                }
            },
            requirejs: {
                compile: {
                    options: {
                        baseUrl: "${adhocracy:frontend.static_dir}/js",
                        paths: {
                            text: "empty:",
                            jquery: "empty:",
                            angular: "empty:",
                            angularAnimate: "empty:",
                            angularAria: "empty:",
                            angularCache: "empty:",
                            angularTranslate: "empty:",
                            angularTranslateLoader: "empty:",
                            angularElastic: "empty:",
                            angularScroll: "empty:",
                            angularFlow: "empty:",
                            angularMessages: "empty:",
                            angularPlaceholderShim: "empty:",
                            flow: "empty:",
                            lodash: "empty:",
                            q: "empty:",
                            modernizr: "empty:",
                            moment: "empty:",
                            leaflet: "empty:",
                            leafletMarkerCluster: "empty:",
                            markdownit: "empty:",
                            sticky: "empty:",
                            socialSharePrivacy: "empty:",
                            polyfiller: "empty:",
                            adhTemplates: "./templates"
                        },
                        name: "Adhocracy",
                        out: "${adhocracy:frontend.static_dir}/js/Adhocracy.min.js"
                    }
                }
            },
            htmlhint: {
                options: {
                    "tagname-lowercase": true,
                    "attr-lowercase": true,
                    "attr-value-double-quotes": true,
                    "tag-pair": true,
                    "id-unique": true,
                    "attr-no-duplication": true,
                    "img-alt-require": true,
                    "style-disabled": true
                },
                src: ["${adhocracy:frontend.static_dir}/js/**/*.html"]
            },
            sass: {
                options: {
                    sourceMap: true,
                    outputStyle: "compressed",
                    functions: {
                        "cachebust": function() {
                            return new sass.types.String("" + Date.now());
                        }
                    }
                },
                dist: {
                    files: {
                        "src/current/current/build/stylesheets/a3.css": "src/current/current/build/stylesheets/scss/a3.scss"
                    }
                }
            },
            sasslint: {
                target: ["src/current/current/build/stylesheets/scss/**/*.scss"]
            }
        });

        grunt.loadNpmTasks('grunt-angular-templates');
        grunt.loadNpmTasks('grunt-contrib-requirejs');
        grunt.loadNpmTasks('grunt-htmlhint');
        grunt.loadNpmTasks('grunt-sass');
        grunt.loadNpmTasks('grunt-sass-lint');

        grunt.registerTask('default', ['ngtemplates', 'requirejs']);
    };
output = ${buildout:directory}/Gruntfile.js
mode = 644

[grunt]
recipe = plone.recipe.command
command =
    . ${source_env:output}
    ${buildout:bin-directory}/grunt
update-command = ${grunt:command}
stop-on-error = yes

[rubygems]
recipe = rubygemsrecipe
gems =
    hologram==1.4.0

[frontend.current.link]
recipe = plone.recipe.command
command =
    ln -sfn ${buildout:directory}/src/${adhocracy:frontend_package_name} ${buildout:directory}/src/current
    ln -sfn ${buildout:directory}/src/${adhocracy:frontend_package_name}/${adhocracy:frontend_package_name} ${buildout:directory}/src/current/current
stop-on-error = yes

[stylesheets]
recipe = plone.recipe.command
command =
    . ${source_env:output}
    ${buildout:bin-directory}/grunt sass
update-command = ${stylesheets:command}
stop-on-error = yes

[hologram]
recipe = collective.recipe.template
inline =
    # Hologram will run from same directory where this config file resides
    # All paths should be relative to there
    # The directory containing the source files to parse recursively
    source: ${buildout:directory}/${adhocracy:frontend.static_dir}/stylesheets/scss
    # The directory that hologram will build to
    destination: ${buildout:directory}/${adhocracy:frontend.static_dir}/styleguide
    # The assets needed to build the docs (includes header.html,
    # footer.html, etc)
    # You may put doc related assets here too: images, css, etc.
    documentation_assets: ../docs/styleguide_assets
    # Any other asset folders that need to be copied to the destination
    # folder. Typically this will include the css that you are trying to
    # document. May also include additional folders as needed.
    dependencies:
    # Mark which category should be the index page
    # Alternatively, you may have an index.md in the documenatation assets
    # folder instead of specifying this configu.
    index: base
output = ${buildout:directory}/etc/hologram.yml
mode = 644

[styleguide]
recipe = plone.recipe.command
command =
    ${buildout:bin-directory}/hologram ${hologram:output}
update-command = ${styleguide:command}
stop-on-error = yes
