[buildout]
parts +=
    nodejs
    npm_config
    npms
    npm_bins
    merge_static_directories
    do_merge_static_directories
    tslint_shortcut
    bower
    AdhocracySpec.ts
    AdhocracyIg.ts
    resources
    meta_api
    javascript
    gruntfile
    grunt
    rubygems
    compass
    compass.min
    stylesheets
    hologram
    styleguide

[tslint_json]
recipe = collective.recipe.template
input = inline:
    {
      "ban": [],
      "rules": {
        "class-name": true,
        "comment-format": [true,
            "check-space"
        ],
        "curly": true,
        "eofline": true,
        "forin": true,
        "indent": false,
        "interface-name": false,
        "jsdoc-format": true,
        "label-position": true,
        "label-undefined": true,
        "max-line-length": [true, 140],
        "no-any": false,
        "no-arg": true,
        "no-bitwise": true,
        "no-console": [true,
            "debug",
            "info",
            "time",
            "timeEnd",
            "trace"
        ],
        "no-consecutive-blank-lines": false,
        "no-construct": true,
        "no-debugger": true,
        "no-duplicate-key": true,
        "no-duplicate-variable": true,
        "no-empty": true,
        "no-eval": true,
        "no-string-literal": false,
        "no-trailing-comma": true,
        "no-trailing-whitespace": true,
        "no-unused-expression": true,
        "no-unused-variable": true,
        "no-unreachable": true,
        "no-use-before-declare": true,
        "no-var-requires": true,
        "one-line": [true,
            "check-catch",
            "check-else",
            "check-open-brace",
            "check-whitespace"
        ],
        "quotemark": [true, "double"],
        "radix": true,
        "semicolon": true,
        "triple-equals": [true, "allow-null-check"],
        "typedef": false,
        "typedef-whitespace": [true,
            ["callSignature", "noSpace"],
            ["catchClause", "noSpace"],
            ["indexSignature", "space"]
        ],
        "use-strict": [true,
            "check-module",
            "check-function"
        ],
        "variable-name": [true, "allow-leading-underscore"],
        "whitespace": [true,
            "check-branch",
            "check-decl",
            "check-operator",
            "check-separator",
            "check-type"
        ]
      }
    }
output = ${buildout:directory}/etc/tslint.json
mode = 644

[tslint_shortcut]
recipe = collective.recipe.template
input = inline:
    #!/bin/bash
    cd "${buildout:directory}"
    export cl_args="${buildout:bin-directory}/tslint -c ${tslint_json:output}"
    ${buildout:bin-directory}/tslint --version
    while read line; do
        cl_args="$cl_args -f $line"
    done < <(git ls-files | grep '\.ts$' | grep -v '\.d\.ts$')
    exec $cl_args
output = ${buildout:bin-directory}/tslint_check_adhocracy
mode = 755

[check_code]
# Extends adhocracy_core/checkcode.cfg['check_code']
css_check =
    CHANGED_SCSS=`git diff --staged --name-only --diff-filter=ACMR | grep '\.scss$'`
    if [ -n "$CHANGED_SCSS" ] ; then
        ${buildout:bin-directory}/scss-lint $CHANGED_SCSS
        ret_code=$(($ret_code + $?))
    fi
js_check =
    CHANGED_TS=`git diff --staged --name-only --diff-filter=ACMR | grep '\.ts$' | grep -v '\.d\.ts'`
    if [ -n "$CHANGED_TS" ] ; then
        ret_code=$(($ret_code + $?))
        export cl_args="${buildout:bin-directory}/tslint -c ${tslint_json:output}"
        while read line; do
            cl_args="$cl_args -f $line"
        done < <(git diff --staged --name-only --diff-filter=ACMR | grep '\.ts$' | grep -v '\.d\.ts')
        exec $cl_args
    fi

[nodejs]
recipe = gp.recipe.node
version = 0.10.28
scripts = node npm

[npm_config]
recipe = collective.recipe.template
input = inline:
    {
        "name": "adhocracy-frontend",
        "version": "0.0.1",
        "devDependencies": {
            "typescript": "1.3.0",
            "tslint": "1.0.1",
            "bower": "1.3.12",
            "jasmine-node": "2.0.0",
            "q": "1.1.2",
            "lodash": "2.4.1",
            "node-fs": "0.1.7",
            "underscore.string": "2.3.3",
            "grunt": "0.4.5",
            "grunt-cli": "0.1.13",
            "grunt-angular-templates": "0.5.7",
            "requirejs": "2.1.15",
            "grunt-contrib-requirejs": "0.4.4"
        }
    }
output = ${buildout:directory}/package.json
mode = 700

[npms]
recipe = plone.recipe.command
command = ${buildout:bin-directory}/npm install
update-command = ${:command}

[npm_bins]
# npm doesn't seem to allow to specify the bin directory, so we link stuff manually.
recipe = plone.recipe.command
command =
    cd ${buildout:bin-directory}
    ln -s ${buildout:directory}/node_modules/.bin/* .
update-command = ${:command}

[bower]
recipe = bowerrecipe
packages =
    jquery#1.11.1
    angular#1.3.8
    angular-route#1.3.8
    angular-animate#1.3.8
    angular-aria#1.3.8
    angular-translate#2.5.2
    angular-translate-loader-static-files#2.5.2
    angular-elastic#2.4.2
    angular-messages#1.3.8
    angular-scroll#0.6.4
    lodash#2.4.1
    requirejs#2.1.15
    requirejs-text#2.0.12
    DefinitelyTyped#bba33bcb0b363ae41db8517a09d1a4d07828616b
    jasmine#2.0.2
    blanket#1.1.5
    q#1.1.2
    moment#2.8.3
    xi/sticky-kit#feature-scrollable
    ng-flow#2.5.1
    jquery.socialshareprivacy#1.4.6
    MagdaN/jquery-html5-placeholder-shim#2015-01-mn-adhocracy-fix
    angular-placeholder-shim#0.3.1

executable = ${buildout:bin-directory}/bower
base-directory = ${adhocracy:frontend.static_dir}/lib
downloads = .

[AdhocracySpec.ts]
recipe = plone.recipe.command
command = make -C ${adhocracy:frontend.static_dir}/js/ AdhocracySpec.ts
update-command = ${:command}

[AdhocracyIg.ts]
recipe = plone.recipe.command
command = make -C ${adhocracy:frontend.static_dir}/js/ AdhocracyIg.ts
update-command = ${:command}

[merge_static_directories]
recipe = collective.recipe.template
# Static directories to be merged. If a file exists in multiple directories
# the first one wins. Customizations should therefore be mentioned on top of
# core packages.
static_directories =
    ${adhocracy:frontend.core.static_dir}
input = inline:
    #!/bin/bash
    mkdir -p ${adhocracy:frontend.static_dir}
    find ${adhocracy:frontend.static_dir} -type l -exec rm {} +
    for dir in ${:static_directories} ; do
        cp -ans `readlink -f $dir`/. ${adhocracy:frontend.static_dir}
    done
output = ${buildout:bin-directory}/merge_static_directories
mode = 700

[do_merge_static_directories]
recipe = plone.recipe.command
command =
    ${merge_static_directories:output}
update-command = ${do_merge_static_directories:command}

[resources]
recipe = plone.recipe.command
command =
    . ${source_env:output}
    cd ${adhocracy:frontend.static_dir}/js/  # must be in this relative path
    git ls-files --other ./Resources_ | xargs rm -f
    ${buildout:bin-directory}/prequest ${buildout:directory}/etc/noserver.ini /meta_api > ${:meta_api_output}
    ${buildout:bin-directory}/tsc --module commonjs --sourcemap ./mkResources.ts
    ${buildout:bin-directory}/node ./mkResources.js ${buildout:directory}/etc/meta_api.json .
update-command = ${resources:command}
meta_api_output = ${buildout:directory}/etc/meta_api.json

[meta_api]
# We link meta_api to the frontend static directory in order to be able to
# deliver and cache it together with the static frontend resources.
recipe = plone.recipe.command
command =
    cd ${adhocracy:frontend.static_dir}
    ln -s ${resources:meta_api_output} .
update-command = ${:command}

[javascript]
recipe = plone.recipe.command
command =
    ${buildout:bin-directory}/tsc -m amd -d --sourcemap ${adhocracy:frontend.static_dir}/js/Adhocracy*.ts
update-command = ${javascript:command}

[gruntfile]
recipe = collective.recipe.template
input = inline:
    module.exports = function(grunt) {
        grunt.initConfig({
            ngtemplates: {
                app: {
                    cwd: '${adhocracy:frontend.static_dir}',
                    src: 'js/**/**.html',
                    dest: '${adhocracy:frontend.static_dir}/js/templates.js',
                    options:      {
                        prefix: '/static/',
                        bootstrap:  function(module, script) {
                             return '\
                                 define(["angular"], function (angular) {\
                                     "use strict";\
                                 var templates = angular.module("templates", []);\
                                 templates.run(["$templateCache", function($templateCache) {\
                                     ' + script + '\
                                 }]);\
                                 return templates;\
                                 });';
                        }
                    }
                }
            },
            requirejs: {
                compile: {
                    options: {
                        baseUrl: "${adhocracy:frontend.static_dir}/js",
                        paths: {
                            text: "empty:",
                            jquery: "empty:",
                            angular: "empty:",
                            angularAnimate: "empty:",
                            angularAria: "empty:",
                            angularTranslate: "empty:",
                            angularTranslateLoader: "empty:",
                            angularElastic: "empty:",
                            angularScroll: "empty:",
                            angularFlow: "empty:",
                            angularMessages: "empty:",
                            angularPlaceholderShim: "empty:",
                            flow: "empty:",
                            lodash: "empty:",
                            q: "empty:",
                            modernizr: "empty:",
                            moment: "empty:",
                            sticky: "empty:",
                            socialSharePrivacy: "empty:",
                            jqueryPlaceholderShim: "empty:",
                            adhTemplates: "./templates"
                        },
                        name: "Adhocracy",
                        out: "${adhocracy:frontend.static_dir}/js/Adhocracy.min.js"
                    }
                }
            }
        });

        grunt.loadNpmTasks('grunt-angular-templates');
        grunt.loadNpmTasks('grunt-contrib-requirejs');

        grunt.registerTask('default', ['ngtemplates', 'requirejs']);
    };
output = ${buildout:directory}/Gruntfile.js
mode = 700

[grunt]
recipe = plone.recipe.command
command =
    . ${source_env:output}
    ${buildout:bin-directory}/grunt
update-command = ${grunt:command}

[rubygems]
recipe = rubygemsrecipe
gems =
    sass==3.4.10
    compass==1.0.1
    hologram==1.3.0
    scss-lint==0.33.0
    susy==2.2.1

[compass]
# Do not use absolute paths for sass_dir, css_dir!
# See https://github.com/Compass/compass/issues/1860
recipe = collective.recipe.template
input = inline:
    # To change this config file please edit *.in and rerun buildout.
    http_path = "/"
    css_dir = "${adhocracy:frontend.static_dir}/stylesheets"
    sass_dir = "${adhocracy:frontend.static_dir}/stylesheets/scss"
    fonts_dir = "${adhocracy:frontend.static_dir}/fonts"
    http_fonts_path = "."
    images_dir = "${adhocracy:frontend.static_dir}/images"
    javascripts_dir = "${adhocracy:frontend.static_dir}/js"
    sourcemap = true
    add_import_path "${adhocracy:frontend.static_dir}/stylesheets/scss"
    Sass::Script::Number.precision = 8
    asset_cache_buster do |path, file|
        if file
            hash = Digest::MD5.file(file.path).hexdigest
            "_=%s" % hash
        else
            ""
        end
    end
output = ${buildout:directory}/etc/compass.rb

[compass.min]
# Do not use absolute paths for sass_dir, css_dir!
# See https://github.com/Compass/compass/issues/1860
recipe = collective.recipe.template
input = inline:
    # To change this config file please edit *.in and rerun buildout.
    http_path = "/"
    css_dir = "${adhocracy:frontend.static_dir}/stylesheets/min"
    sass_dir = "${adhocracy:frontend.static_dir}/stylesheets/scss"
    fonts_dir = "${adhocracy:frontend.static_dir}/fonts"
    http_fonts_path = "."
    images_dir = "${adhocracy:frontend.static_dir}/images"
    javascripts_dir = "${adhocracy:frontend.static_dir}/js"
    environment = :production
    sourcemap = true
    add_import_path "${adhocracy:frontend.static_dir}/stylesheets/scss"
    Sass::Script::Number.precision = 8
    asset_cache_buster do |path, file|
        if file
            hash = Digest::MD5.file(file.path).hexdigest
            "_=%s" % hash
        else
            ""
        end
    end
output = ${buildout:directory}/etc/compass.min.rb

[stylesheets]
recipe = plone.recipe.command
command =
    ${buildout:bin-directory}/compass compile --force -c ${buildout:directory}/etc/compass.rb
    ${buildout:bin-directory}/compass compile --force -c ${buildout:directory}/etc/compass.min.rb
update-command = ${stylesheets:command}

[hologram]
recipe = collective.recipe.template
input = inline:
    # Hologram will run from same directory where this config file resides
    # All paths should be relative to there
    # The directory containing the source files to parse recursively
    source: ${buildout:directory}/${adhocracy:frontend.static_dir}/stylesheets/scss
    # The directory that hologram will build to
    destination: ${buildout:directory}/${adhocracy:frontend.static_dir}/styleguide
    # The assets needed to build the docs (includes header.html,
    # footer.html, etc)
    # You may put doc related assets here too: images, css, etc.
    documentation_assets: ../docs/styleguide_assets
    # Any other asset folders that need to be copied to the destination
    # folder. Typically this will include the css that you are trying to
    # document. May also include additional folders as needed.
    dependencies:
    # Mark which category should be the index page
    # Alternatively, you may have an index.md in the documenatation assets
    # folder instead of specifying this configu.
    index: type
output = ${buildout:directory}/etc/hologram.yml
mode = 644

[styleguide]
recipe = plone.recipe.command
command =
    ${buildout:bin-directory}/hologram ${hologram:output}
update-command = ${styleguide:command}
