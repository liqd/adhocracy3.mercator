[buildout]
allow-hosts = *.python.org
prefer-final = true
show-picked-versions= true
extends =
    versions.cfg
versions = versions
parts +=
     dirs
     adhocracy
     development.ini
     zeodirs
     zeo.conf
     test.ini
     noserver.ini
     omelette
     checkversions
     supervisor
     i18n
eggs =
    pip
    adhocracy_core[debug]

[servers]
proxy_ip = 127.0.0.1

[dirs]
recipe = z3c.recipe.mkdir
paths = etc
        var
        var/log
        var/uploads_tmp
        var/mail
        var/mail/cur
        var/mail/new
        var/mail/tmp

[zeodirs]
recipe = z3c.recipe.mkdir
paths = var/db/${adhocracy:backend_package_name}/blobs
        var/db/test/blobs
mode = 700

[adhocracy]
recipe = zc.recipe.egg
dependent-scripts = true
eggs = {buildout:eggs}
ackend_package_name = adhocracy_sample

[development.ini]
recipe = collective.recipe.template
input = ${buildout:directory}/etc/development.ini.in
output = ${buildout:directory}/etc/development.ini

[zeo.conf]
recipe = collective.recipe.template
input = ${buildout:directory}/etc/zeo.conf.in
output = ${buildout:directory}/etc/zeo.conf

[test.ini]
recipe = collective.recipe.template
input = ${buildout:directory}/etc/test.ini.in
output = ${buildout:directory}/etc/test.ini

[noserver.ini]
recipe = collective.recipe.template
input = ${buildout:directory}/etc/noserver.ini.in
output = ${buildout:directory}/etc/noserver.ini

[omelette]
recipe = collective.recipe.omelette
eggs =
    ${adhocracy:eggs}

# check for new python packages with something like
# bin/checkversions -v -l 0 versions.cfg | grep was
[checkversions]
recipe = zc.recipe.egg
eggs = z3c.checkversions [buildout]

[supervisor]
recipe = collective.recipe.supervisor
http-socket = unix
file = ${buildout:directory}/var/supervisord.sock
supervisord-environment = LD_LIBRARY_PATH="${buildout:directory}/python/parts/opt/lib/"
programs =
    5 zeo_auditing (autostart=false stdout_logfile=var/log/zeo_auditing.log stderr_logfile=NONE startsecs=5 stopwaitsecs=10) ${buildout:bin-directory}/runzeo [-C etc/zeo_auditing.conf] ${buildout:directory} true
    10 zeo (autostart=false stdout_logfile=var/log/zeo.log stderr_logfile=NONE startsecs=5 stopwaitsecs=10) ${buildout:bin-directory}/runzeo [-C etc/zeo.conf] ${buildout:directory} true
    20 autobahn (autostart=false stdout_logfile=var/log/autobahn.log stderr_logfile=NONE) ${buildout:bin-directory}/ad_start_ws_server [etc/development.ini] ${buildout:directory} true
    30 backend (autostart=false stdout_logfile=var/log/adhocracy_backend.log stderr_logfile=NONE startsecs=5 stopwaitsecs=10) ${buildout:bin-directory}/gunicorn [--paste etc/development.ini --forwarded-allow-ips="${servers:proxy_ip}"] ${buildout:directory} true
    50 test_zeo_auditing (autostart=false stdout_logfile=var/log/test_zeo_auditing.log stderr_logfile=NONE startsecs=2 stopwaitsecs=10) ${buildout:bin-directory}/runzeo [-C etc/test_zeo_auditing.conf] ${buildout:directory} true
    100 test_zeo (autostart=false stdout_logfile=var/log/test_zeo.log stderr_logfile=NONE startsecs=2 stopwaitsecs=10) ${buildout:bin-directory}/runzeo [-C etc/test_zeo.conf] ${buildout:directory} true
    200 test_autobahn (autostart=false stdout_logfile=var/log/test_autobahn.log stderr_logfile=NONE) ${buildout:bin-directory}/ad_start_ws_server [etc/test.ini] ${buildout:directory} true
    300 test_backend (autostart=false stdout_logfile=var/log/test_adhocracy_backend.log stderr_logfile=NONE startsecs=5 stopwaitsecs=10) ${buildout:bin-directory}/gunicorn [--paste etc/test.ini --forwarded-allow-ips="${servers:proxy_ip}"] ${buildout:directory} true
groups =
    10 adhocracy zeo,zeo_auditing,autobahn,backend
    20 adhocracy_test test_zeo,test_zeo_auditing,test_autobahn,test_backend

[i18n]
recipe = collective.recipe.genshi
domain = adhocracy
search_path = ./src/adhocracy_core/adhocracy_core
locales_path = ./src/adhocracy_core/adhocracy_core/locale
inline =
    #!/bin/bash
    #configuration
    DOMAIN="${:domain}"
    SEARCH_PATH="${:search_path}"
    LOCALES_PATH="${:locales_path}"
    # create locales folder if not exists
    if [ ! -d "$$LOCALES_PATH" ]; then
        echo "Locales directory not exists, create"
        mkdir -p "$$LOCALES_PATH"
    fi
    # create pot if not exists
    if [ ! -f "$$LOCALES_PATH"/$$DOMAIN.pot ]; then
        echo "Create pot file"
        touch "$$LOCALES_PATH"/$$DOMAIN.pot
    fi
    # no arguments, extract and update
    if [ $# -eq 0 ]; then
        echo "Extract messages"
        ${buildout:directory}/bin/pot-create "$$SEARCH_PATH" -o "$$LOCALES_PATH"/$$DOMAIN.pot
        echo "Update translations"
        for po in "$$LOCALES_PATH"/*/LC_MESSAGES/$$DOMAIN.po; do
            msgmerge -o "$$po" "$$po" "$$LOCALES_PATH"/$$DOMAIN.pot
        done
        echo "Compile message catalogs"
        for po in "$$LOCALES_PATH"/*/LC_MESSAGES/*.po; do
            msgfmt --statistics -o "$${po%.*}.mo" "$$po"
        done
    # first argument represents language identifier, create catalog
    else
        cd "$$LOCALES_PATH"
        mkdir -p $1/LC_MESSAGES
        msginit -i $$DOMAIN.pot -o $$1/LC_MESSAGES/$$DOMAIN.po -l $1
    fi
output = ${buildout:directory}/bin/ad_i18n
mode = 755
