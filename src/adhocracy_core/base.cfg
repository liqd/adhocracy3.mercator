[buildout]
allow-hosts = *.python.org
prefer-final = true
show-picked-versions= true
extends =
    versions.cfg
versions = versions
parts +=
     dirs
     adhocracy
     development.ini
     test.ini
     test_with_ws.ini
     noserver.ini
     omelette
     coveragerc
     test_run_unit
     checkversions
     supervisor

[servers]
proxy_ip = 127.0.0.1

[dirs]
recipe = z3c.recipe.mkdir
paths = etc
        var
        var/log
        var/blobs
        var/uploads_tmp
        var/mail
        var/mail/cur
        var/mail/new
        var/mail/tmp

[adhocracy]
recipe = zc.recipe.egg
dependent-scripts = true
eggs =
    pip
    adhocracy_core[debug]
backend_package_name = adhocracy_sample

[development.ini]
recipe = collective.recipe.template
input = ${buildout:directory}/etc/development.ini.in
output = ${buildout:directory}/etc/development.ini

[test.ini]
recipe = collective.recipe.template
input = ${buildout:directory}/etc/test.ini.in
output = ${buildout:directory}/etc/test.ini

[test_with_ws.ini]
recipe = collective.recipe.template
input = ${buildout:directory}/etc/test_with_ws.ini.in
output = ${buildout:directory}/etc/test_with_ws.ini

[noserver.ini]
recipe = collective.recipe.template
input = ${buildout:directory}/etc/noserver.ini.in
output = ${buildout:directory}/etc/noserver.ini

[omelette]
recipe = collective.recipe.omelette
eggs =
    ${adhocracy:eggs}

[coveragerc]
recipe = collective.recipe.template
input = ${buildout:directory}/etc/coveragerc.in
output = ${buildout:directory}/etc/coveragerc

[test_run_unit]
recipe = collective.recipe.template
package_paths = adhocracy_core
input = inline:
    #!/bin/bash
    cd ${buildout:directory}
    bin/coverage run bin/py.test -m"not functional and not jasmine" ${:package_paths} "$@"
    bin/coverage report
    bin/coverage html
output = ${buildout:bin-directory}/py.test_run_unittests_with_coverage
mode = 755

# check for new python packages with something like
# bin/checkversions -v -l 0 versions.cfg | grep was
[checkversions]
recipe = zc.recipe.egg
eggs = z3c.checkversions [buildout]

[supervisor]
recipe = collective.recipe.supervisor
http-socket = unix
file = ${buildout:directory}/var/supervisord.sock
supervisord-environment = LD_LIBRARY_PATH="${buildout:directory}/python/parts/opt/lib/"
programs =
    10 zeo (autostart=false stdout_logfile=var/log/zeo.log stderr_logfile=NONE startsecs=5 stopwaitsecs=10) ${buildout:bin-directory}/runzeo [-C etc/zeo.conf] ${buildout:directory} true
    20 autobahn (autostart=false stdout_logfile=var/log/autobahn.log stderr_logfile=NONE) ${buildout:bin-directory}/start_ws_server [etc/development.ini] ${buildout:directory} true
    30 backend (autostart=false stdout_logfile=var/log/adhocracy_backend.log stderr_logfile=NONE startsecs=5 stopwaitsecs=10) ${buildout:bin-directory}/gunicorn [--paste etc/development.ini --forwarded-allow-ips="${servers:proxy_ip}"] ${buildout:directory} true
    100 test_zeo (autostart=false stdout_logfile=var/log/test_zeo.log stderr_logfile=NONE startsecs=2 stopwaitsecs=10) ${buildout:bin-directory}/runzeo [-C etc/test_zeo.conf] ${buildout:directory} true
    200 test_autobahn (autostart=false stdout_logfile=var/log/test_autobahn.log stderr_logfile=NONE) ${buildout:bin-directory}/start_ws_server [etc/test_with_ws.ini] ${buildout:directory} true
    300 test_backend (autostart=false stdout_logfile=var/log/test_adhocracy_backend.log stderr_logfile=NONE startsecs=5 stopwaitsecs=10) ${buildout:bin-directory}/gunicorn [--paste etc/test.ini --forwarded-allow-ips="${servers:proxy_ip}"] ${buildout:directory} true
    300 test_backend_with_ws (autostart=false stdout_logfile=var/log/test_adhocracy_backend_with_ws.log stderr_logfile=NONE startsecs=5 stopwaitsecs=10) ${buildout:bin-directory}/gunicorn [--paste etc/test_with_ws.ini --forwarded-allow-ips="${servers:proxy_ip}"] ${buildout:directory} true
groups =
    10 adhocracy zeo,autobahn,backend
    20 adhocracy_test test_zeo,test_autobahn,test_backend
