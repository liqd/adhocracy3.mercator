"""Pool resource type and zodb persistent IPool implementation."""
import datetime

from substanced.folder import Folder
from substanced.util import find_service
from substanced.interfaces import IFolder
from zope.interface import implementer

import adhocracy_core.sheets.name
import adhocracy_core.sheets.pool
import adhocracy_core.sheets.metadata
from adhocracy_core.interfaces import IPool
from adhocracy_core.resources import add_resource_type_to_registry
from adhocracy_core.resources.resource import Base
from adhocracy_core.resources.resource import resource_metadata_defaults


class IBasicPool(IPool):

    """Basic Pool."""


@implementer(IPool, IFolder)
class Pool(Base, Folder):

    """An Auto-Naming Folder.

    Custom names are allowed and coexists with the autogenerated names.

    The next_name method sequentially increments the last name:
    ``0000001``, then ``0000002``, and so on.
    """

    #  The pool needs to provide IFolder to make substance.util.find_service
    # work

    _autoname_length = 7
    _autoname_last = -1

    def next_name(self, subobject, prefix='') -> str:
        """Generate name to add subobject to the folder.

        This method does:

            - increment the last generated name
            - zero-filling the left hand side of the result with 7 zeros.
            - add prefix to the left hand side if any

        If the generated Name exists add timestamp to the right side.

        """
        intifiable = self._autoname_last + 1
        name = prefix + self._zfill(intifiable)
        self._autoname_last = intifiable
        if name in self.data:
            timestamp = datetime.datetime.now().isoformat()
            name += '_' + timestamp
        return name

    def add_next(self, subobject, prefix=''):
        """Add a subobject and name it automatically.

        Use the name returned by this folder's ``next_name`` method.

        """
        name = self.next_name(subobject, prefix=prefix)
        return self.add(name, subobject, send_events=False)

    def _zfill(self, name):
        return str(int(name)).zfill(self._autoname_length)

    def find_service(self, service_name, *sub_service_names):
        """Return  the :term:`service` for the given context."""
        return find_service(self, service_name, *sub_service_names)


pool_metadata = resource_metadata_defaults._replace(
    iresource=IBasicPool,
    content_class=Pool,
    basic_sheets=[adhocracy_core.sheets.name.IName,
                  adhocracy_core.sheets.pool.IPool,
                  adhocracy_core.sheets.metadata.IMetadata,
                  ],
    element_types=[IPool],
)


def includeme(config):
    """Add resource type to registry."""
    add_resource_type_to_registry(pool_metadata, config)
